package com.ojas.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import static org.springframework.security.config.Customizer.withDefaults;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig {

	@Autowired
	private UserDetailsService userDetailsService;

	@Bean
	// For Customized we should use UserDetailsService
	public void configured(AuthenticationManagerBuilder auth) throws Exception {

		auth.userDetailsService(userDetailsService).passwordEncoder(encodePWD());
	}

	@Bean
	public SecurityFilterChain configure(HttpSecurity http) throws Exception {
		http.csrf(withDefaults());
		http.authorizeHttpRequests().antMatchers("/rest/auth/process").permitAll().antMatchers("/secure/rest/admin/add")
				.hasAnyAuthority("ADMIN").and().formLogin(withDefaults());
		return http.build();
	}

	// 2)Authorization
//	@Bean
//	SecurityFilterChain configAuthorization(HttpSecurity http) throws Exception {
//
////		http.csrf().disable();
//
//		http.authorizeRequests().antMatchers("/secure/rest/admin/add").permitAll().antMatchers("/rest/auth/process")
//				.permitAll().anyRequest().authenticated().and().formLogin().permitAll().and().logout().permitAll();
//
//		return null;
//
//	}

	@Bean
	BCryptPasswordEncoder encodePWD() {

		return new BCryptPasswordEncoder();
	}

}
